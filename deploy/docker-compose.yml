services:
  postgres:
    image: postgres:14
    env_file:
      - path: .env
        required: true
    hostname: ${POSTGRES_HOST}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 2
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: "on-failure"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - main-backend-net
  
  rabbitmq:
    image: rabbitmq:3.10.7-management
    env_file:
      - path: .env
        required: true
    hostname: ${RABBITMQ_HOST}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "${RABBITMQ_PORT_MANAGEMENT}:15672"
      - "${RABBITMQ_PORT}:5672"
    restart: "on-failure"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - main-backend-net

  backend-main:
    build:
      context: ../
      dockerfile: ./build/Dockerfile
    env_file:
      - path: .env
        required: true
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    restart: "on-failure"
    ports:
      - "${APP_PORT}:${APP_PORT}"
    volumes:
      - backend-shared-volume:/mnt/backend-shared
    networks:
      - main-backend-net

  backend-worker:
    build:
      context: ../
      dockerfile: ./build/Dockerfile
    env_file:
      - path: .env
        required: true
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    restart: "on-failure"
    volumes:
      - backend-shared-volume:/mnt/backend-shared
    networks:
      - main-backend-net
    command: "./worker"

volumes:
  postgres_data:
  rabbitmq-data:
  backend-shared-volume:

networks:
  main-backend-net:
    driver: bridge
    name: main-backend-net
